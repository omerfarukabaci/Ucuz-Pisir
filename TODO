Html/Templates:
  ☐ change text in the routes "/login" and "/register" from Turkish to English . @started(18-11-07 17:17)
  ☐ Add footer: @started(18-11-07 17:17)
      ☐ Maybe move: about link from header to footer @started(18-11-07 17:17)
  ✘ recipe.html @started(18-12-04 21:24) @cancelled(18-12-12 21:42) @wasted(1w1d18m19s)
		This is task is covered below as "add new template post.html

Gitignore:
  ☐ Check if docs/build ignore correct. @started(18-12-04 20:07)

Users:
  ✔ Fix SQLalchemy parts inside custom validations of register @started(18-11-07 23:07) @done(18-12-09 23:01) @lasted(4w3d23h54m53s)


Unorganized:
	✔ Wrap update profile picture with a function @berkan @done(18-12-12 19:47)
	☐ Rename picture as image on whole project
		It is inconsistent with rest of the project, some images are randomly named as picture
	✔ Add new validator to posts: @done(18-12-12 20:20)
		✔ Content minimum character: 100? @done(18-12-12 20:20)
		✔ Title minimum character: 8 @done(18-12-12 20:17)
		✔ Title maximum character: 50 @done(18-12-12 20:17)

After the project deadline todos:
	☐ Default image for different kind of recipes: ex: burger, pasta, desert etc

Video 8 posts, update, delete:
	✔ New route: "/post/new": @done(18-12-12 19:16)
		✔ @loginrequired @done(18-12-12 19:16)
	✔ creat_post function: @done(18-12-12 20:21)
		✔ create new form instance @done(18-12-12 19:19)
			✔ send inside of render_temp as "form=form" @done(18-12-12 20:15)
		✔ methods: get, post @done(18-12-12 19:18)
		✔ if form.validate on submit: @done(18-12-12 19:26)
			✔ flash: your post has been created @done(18-12-12 19:20)
			✔ post = Post(title = x, content = form.content.data, author = z) @done(18-12-12 19:26)
			✔ post.create() @done(18-12-12 19:26)
			✔ return redirect url_for(home) @done(18-12-12 19:26)
	✔ new form: class PostForm(flaskform): @done(18-12-12 20:21)
		✔ title stringfiled, validators: datareq @done(18-12-12 20:20)
		✔ add import textareafield to forms.py @done(18-12-12 20:20)
		✔ content textareafield, validators: datareq @done(18-12-12 20:20)
		✔ submit submitfield @done(18-12-12 20:20)
	✔ new template: create_post: @done(18-12-12 20:49)
		✔ copy form from other template @done(18-12-12 20:46)
		✔ replace ? with title @done(18-12-12 20:49)
		✔ replace password with content @done(18-12-12 20:49)
		✔ delete forgot password @done(18-12-12 20:49)
	✔ add import  postform to routes.py @done(18-12-12 20:50)
	☐ Add to layout template:
		☐ if user auth'd link: create post
	☐ remove dummy recipes? @ömer
	☐ add to home(): @ömer
		☐ posts = Post.querry.all()
	☐ Change home template:
		☐ ?
		☐ Add link for posts:
			☐ url_for(post, post_id=post_id)
	☐ New route: "/post/<post_id>"
		☐ def post(post_id) :
			☐ post = Post.query.get_or_404(post_id)
	☐ Add new template post.html:
		☐ Copy from home
			☐ remove link of post
		☐ Add inside div article metadata:
			☐ if post.author == current_user:
				☐ div
					☐ a href link, url_for(update_post, post_id = post.id), Update
					☐ button type button, class btn btn-danger btn-sm m1, delete
		☐ Modal for confirming deletion:
			☐ Go to button live deomo bootstrap page
			☐ Copy the modal from bootstrap page
			☐ paste it right above content closing logic
			☐ Change modal title to "delete post?"
			☐ remove modal content
			☐ add to modal footer:
				☐ form action = "url_for("delet_psot", post_id = post.id)", method = post
					☐ input class button type submit
	☐ Add new route: "/post/<post_id>/update":
		☐ Add func update_post(post_id):
			This can be posibly copied from post function
			☐ post = Post.query.get_or_404(post_id)
			☐ if post.author != current user:
				☐ abort(403)
					This means it's forbidden. Since we don't want non authors to edit the post
			We use same create_post template for both update and create
			☐ Send diferent legend to render template: update post
			☐ form = postForm()
			☐ if form.validate_on_subm:
				☐ post.title = form.title.data
				☐ psot.content = forn.content.data
				☐ post.update()
				☐ flash("your post has been updated")
				☐ return redirect(url_for('post', post_id = post.id))
			☐ elif request.method == 'GET':
				☐ form.title.data = post.title
				☐ form.content.data = post.content
	☐ Add new route: "/post/<int:post_id>/delete":
		☐ method = ['POST']
		☐ post = Post.query.get_or_404(post_id)
		☐ if post.author != current user:
				☐ abort(403)
		☐ post.delete
		☐ flash("your post has been deleted")
		☐ retrun redirect(home)
	☐ Import abort at routes.py
	Not coverd on video:
		✔ New table: posts / recipes @done(18-12-12 18:59)
			✔ It already exitst? Its recipes @done(18-12-12 18:59)
			☐ Add functionally to query all
			☐ add parameter four04 = None:
				☐ if 404:
					☐ add return 404 if it doesnt exists
			✔ Add recipe_id as member to class @done(18-12-12 20:16)
				Since we will use it on route: "/recipe/<recipe_id>"
		✔ Our post form (add recipe): @berkan @done(18-12-12 21:44)
			✔ Add recipe image @done(18-12-12 21:44)
		✘ Add to dbinit: @cancelled(18-12-12 20:16)
			✘ intializing dummy recipes @cancelled(18-12-12 20:16)
		✔ Git add default recipe_image @done(18-12-12 20:16)
			We will use this at dbinit.py when init'ing the default images
				(like we did with the default user image)
		✔ Add getRecipeImage function and route @done(18-12-12 19:05)
	Ömer:
		Not coverd on video:
			✔ New table: posts / recipes @done(18-12-12 18:59)
				✔ It already exitst? Its recipes @done(18-12-12 18:59)
				✔ Add functionally to query all @done(18-12-12 20:30)
				☐ add parameter four04 = None:
					☐ if 404:
						☐ add return 404 if it doesnt exists
			✔ Add recipe_id as member to class @done(18-12-12 20:15)
				Since we will use it on route: "/recipe/<recipe_id>"
			✘ Add to dbinit: @cancelled(18-12-12 20:15)
				✘ intializing dummy recipes @cancelled(18-12-12 20:15)
			✔ Git add default recipe_image @done(18-12-12 20:15)
				We will use this at dbinit.py when init'ing the default images
					(like we did with the default user image)
	✔ remove dummy recipes? @done(18-12-12 21:47)
	✔ add to home(): @done(18-12-12 21:47)
		✔ posts = Post.querry.all() @done(18-12-12 21:47)
		