Html/Templates:
✘ recipe.html @started(18-12-04 21:24) @cancelled(18-12-12 21:42) @wasted(1w1d18m19s)
	  This is task is covered below as "add new template post.html

Gitignore:
☐ Check if docs/build ignore correct. @started(18-12-04 20:07)

Users:
✔ Fix SQLalchemy parts inside custom validations of register @started(18-11-07 23:07) @done(18-12-09 23:01) @lasted(4w3d23h54m53s)

Unorganized:
  ✔ Wrap update profile picture with a function @berkan @done(18-12-12 19:47)
  ✔ Add new validator to posts: @done(18-12-12 20:20)
	  ✔ Content minimum character: 100? @done(18-12-12 20:20)
	  ✔ Title minimum character: 8 @done(18-12-12 20:17)
	  ✔ Title maximum character: 50 @done(18-12-12 20:17)

After the project deadline todos:
  ☐ Default image for different kind of recipes: ex: burger, pasta, desert etc
  ☐ Polish the 404 page, add an image etc 
  ☐ recipe/<recipe_id> route: @high 
	  ☐ change the route to recipe/<recipe_title>
  ☐ Change to database:
	  ☐ Recipe:
		  ☐ recipe_title has to be unique
			  This task is related to @high tagged task

  Html/Templates:
	  ☐ change text in the routes "/login" and "/register" from Turkish to English . @started(18-11-07 17:17)
	  ☐ Add footer: @started(18-11-07 17:17)
		  ☐ Maybe move: about link from header to footer @started(18-11-07 17:17)

  ☐ Rename picture as image on whole project
	  It is inconsistent with rest of the project, some images are randomly named as picture
	  
Video 8 posts, update, delete:
  ✔ New route: "/post/new": @done(18-12-12 19:16)
	  ✔ @loginrequired @done(18-12-12 19:16)
  ✔ creat_post function: @done(18-12-12 20:21)
	  ✔ create new form instance @done(18-12-12 19:19)
		  ✔ send inside of render_temp as "form=form" @done(18-12-12 20:15)
	  ✔ methods: get, post @done(18-12-12 19:18)
	  ✔ if form.validate on submit: @done(18-12-12 19:26)
		  ✔ flash: your post has been created @done(18-12-12 19:20)
		  ✔ post = Post(title = x, content = form.content.data, author = z) @done(18-12-12 19:26)
		  ✔ post.create() @done(18-12-12 19:26)
		  ✔ return redirect url_for(home) @done(18-12-12 19:26)
  ✔ new form: class PostForm(flaskform): @done(18-12-12 20:21)
	  ✔ title stringfiled, validators: datareq @done(18-12-12 20:20)
	  ✔ add import textareafield to forms.py @done(18-12-12 20:20)
	  ✔ content textareafield, validators: datareq @done(18-12-12 20:20)
	  ✔ submit submitfield @done(18-12-12 20:20)
  ✔ new template: create_post: @done(18-12-12 20:49)
	  ✔ copy form from other template @done(18-12-12 20:46)
	  ✔ replace ? with title @done(18-12-12 20:49)
	  ✔ replace password with content @done(18-12-12 20:49)
	  ✔ delete forgot password @done(18-12-12 20:49)
  ✔ add import  postform to routes.py @done(18-12-12 20:50)
  ✔ Add to layout template: @ömer @done(18-12-12 23:05)
	  ✔ if user auth'd link: create post @ömer @done(18-12-12 23:05)
  ✔ remove dummy recipes? @ömer @done(18-12-12 21:48)
  ✔ add to home(): @ömer @done(18-12-12 21:48)
	  ✔ posts = Post.querry.all() @done(18-12-12 21:48)
  ✔ Change home template: @done(18-12-12 21:49)
  ✔ ? @done(18-12-13 00:27)
  ✔ Add link for posts: @done(18-12-13 00:27)
	  ✔ url_for(post, post_id=post_id) @done(18-12-13 00:27)
  ✔ New route: "/post/<post_id>" @berkan @done(18-12-12 22:15)
	  ✔ def post(post_id) :@berkan @done(18-12-12 22:15)
		  ✔ post = Post.query.get_or_404(post_id)@berkan @done(18-12-12 22:15)
  ✔ Create custom 404 page @berkan @done(18-12-12 22:27)
	  ✔ Add error handler to routes @done(18-12-12 22:27)

  ☐ Add new template post.html: @berkan
	  ✔ Copy from home @berkan @done(18-12-12 22:27)
		  ☐ remove link of post @berkan
	  ☐ Add inside div article metadata: @berkan
		  ✔ if post.author == current_user: @berkan @done(18-12-12 22:34)
			  ☐ div @berkan
				  ☐ a href link, url_for(update_post, post_id = post.id), Update @berkan
				  ☐ button type button, class btn btn-danger btn-sm m1, delete @berkan
	  ☐ Modal for confirming deletion:
		  ☐ Go to button live deomo bootstrap page
		  ☐ Copy the modal from bootstrap page
		  ☐ paste it right above content closing logic
		  ☐ Change modal title to "delete post?"
		  ☐ remove modal content
		  ☐ add to modal footer:
			  ☐ form action = "url_for("delet_psot", post_id = post.id)", method = post
				  ☐ input class button type submit
  ☐ Add new route: "/post/<post_id>/update":
	  ☐ Add func update_post(post_id):
		  This can be posibly copied from post function
		  ☐ post = Post.query.get_or_404(post_id)
		  ☐ if post.author != current user:
			  ☐ abort(403)
				  This means it's forbidden. Since we don't want non authors to edit the post
		  We use same create_post template for both update and create
		  ☐ Send diferent legend to render template: update post
		  ☐ form = postForm()
		  ☐ if form.validate_on_subm:
			  ☐ post.title = form.title.data
			  ☐ psot.content = forn.content.data
			  ☐ post.update()
			  ☐ flash("your post has been updated")
			  ☐ return redirect(url_for('post', post_id = post.id))
		  ☐ elif request.method == 'GET':
			  ☐ form.title.data = post.title
			  ☐ form.content.data = post.content
  ☐ Add new route: "/post/<int:post_id>/delete":
	  ☐ method = ['POST']
	  ☐ post = Post.query.get_or_404(post_id)
	  ☐ if post.author != current user:
			  ☐ abort(403)
	  ☐ post.delete
	  ☐ flash("your post has been deleted")
	  ☐ retrun redirect(home)
  ☐ Import abort at routes.py
  Not coverd on video:
	  ✔ New table: posts / recipes @done(18-12-12 18:59)
		  ✔ It already exitst? Its recipes @done(18-12-12 18:59)
		  ✔ Add functionally to query all @done(18-12-12 21:50)
		  ✔ add parameter four04 = None: @done(18-12-17 03:45)
			  ✔ if 404: @done(18-12-17 03:45)
				  ✔ add return 404 if it doesnt exists @done(18-12-17 03:45)
		  ✔ Add recipe_id as member to class @done(18-12-12 20:16)
			  Since we will use it on route: "/recipe/<recipe_id>"
	  ✔ Our post form (add recipe): @berkan @done(18-12-12 21:44)
		  ✔ Add recipe image @done(18-12-12 21:44)
	  ✘ Add to dbinit: @cancelled(18-12-12 20:16)
		  ✘ intializing dummy recipes @cancelled(18-12-12 20:16)
	  ✔ Git add default recipe_image @done(18-12-12 20:16)
		  We will use this at dbinit.py when init'ing the default images
			  (like we did with the default user image)
	  ✔ Add getRecipeImage function and route @done(18-12-12 19:05)
	  
	  ✔ recipe.html template: @done(18-12-17 03:45)
		  ✔ Add the following instead of temporary h1 element @done(18-12-17 03:45)
			  <!--- """Uncomment this after fixing modal part
			  <div>
				  <a class="btn btn-secondary btn-sm mt-1 mb-1" href="{{ url_for('update_post', post_id=post.id) }}">Update</a>
				  <button type="button" class="btn btn-danger btn-sm m-1" data-toggle="modal" data-target="#deleteModal">Delete</button>
			  </div>"""-->